Getting Started
============================================
settings.py is the main config folder
manage.py is the root of the django prj

python manage.py runserver

Note (2018/6/14)
5] What django does

1. handles URLs
2. returns responses
3. remembers things (remember what to response)

accounts -- user "django app"
vedio -- 'django app'
menu listing

python manage.py startapp restaurants  // create an app called restaurants
views: the place to handle urls

======HTML & Django============
6] Rendering HTML 
	html_var = 'f strings'
	html_= f"""<!DOCTYPE html>
	<html lang=en>
	<head>
	</head>
	<body>
	<h1>Hello World!</h1>
	<p>This is {html_var} coming through</p>
	</body>
	</html>
	"""
	#f strings 
	return HttpResponse(html_)
7] render a django template
template settings in settings/base.py is how are template being randered

8] context in django templates
use {% verbatim %}{% endverbatim %}   in template(html) it will show the original template
should not be too much logic in the html but should be in the view (views.py )

9] template inheritance
{% block head_title %}About || {{block.super}}{% endblock head_title %}
{% extends "base.html" %}
{% block content %}
Hello there
{% endblock content %}

10] Include Template Tag
{% include 'snippets/sidebar.html' %}
{% include 'snippets/css.html' %}

11] Reactive Virtualenv
.\Scripts\activate(deactivate)

12]Class based views
a different way to render a view/another way to handle a url
refer to https://docs.djangoproject.com/en/1.11/ref/class-based-views/
urls:
from restaurants.views import ContactView
url(r'^contact/(?P<Id>\d+)$', ContactView.as_view()),
views:
class ContactView(View):
	def get(self, request, *args, **kwargs):
		print(kwargs)
		context = {}
		return render(request, "contact.html", context) 

13] Template view
eg:
class HomeView(TemplateView):
	template_name = 'home.html'
	#overwirite the predefined method
	def get_context_data(self, *args, **kwargs):
		context = super(HomeView, self).get_context_data(*args, **kwargs)
		#print(context)
		num = random.randint(0,10000);
		some_list = [num, random.randint(0,100000), random.randint(0,100000)]
		context = {
			"html_var":"context variable", 
			"random_num":num, 
			"bool_item":True,
			"some_list":some_list
		}
		return context 


if there is no context for the view, can use 
url(r'^about$', TemplateView.as_view(template_name='about.html')),
instead of 
url(r'^contact$', ContactView.as_view())

14] remembering things with models
if Django. No changes detected when "makemigrations"
firstly use : python manage.py makemigrations --empty yourappname to generate an empty initial.py
then use: python manage.py makemigrations generate the original model related migration file

in local.py add new 'restaurants' under INSTALLED_APPS
in models.py under restaurants, create a new model:
class RestaurantLocation(models.Model): 
	name = models.CharField(max_length=120)
	location = models.CharField(max_length=120, null=True, blank=True)

python manage.py makemigrations
python manage.py migrate

15]More on Model Fields
timestamp	= models.DateTimeField(auto_now=False, auto_now_add=False)

16] displaying saved data

in views.py
from .models import RestaurantLocation

def restaurant_listview(request):
	template_name = 'restaurants/restaurants_list.html'
	queryset = RestaurantLocation.objects.all()
	context = {
		"object_list":queryset
	}
	return render(request, template_name, context)

in template(restaurants_list.html)
<ul>
	{% for obj in object_list %}
		<li>{{obj}}<br/>
		{{ obj.name }} {{ obj.location }} {{ obj.category }} {{ obj.timestamp }} {{ obj.update }}</li>
	{% endfor %}
</ul>

17] understanding querysets
allow u to grab data from database
https://docs.djangoproject.com/en/1.11/ref/models/querysets/

18] generic list view
https://docs.djangoproject.com/en/1.11/ref/class-based-views/generic-display/
in views:
from django.views.generic import ListView
class SearchRestaurantsListView(ListView):
	#it will use the default <model name>_list.html as template
	def get_queryset(self):
		print (self.kwargs)
		slug = self.kwargs.get("slug")
		if slug:
			queryset = RestaurantLocation.objects.filter(
				Q(category__iexact=slug) | Q(category__icontains=slug))
		else:
			queryset = RestaurantLocation.objects.none
		return queryset

in urls:
    url(r'^restaurants/(?P<slug>\w+)$', SearchRestaurantsListView.as_view()),


 19] restaurant profile detail
 	#detail view need:
	#Define RestaurantsDetailView.model, 
	#RestaurantsDetailView.queryset, 
	#or override RestaurantsDetailView.get_queryset().

	# Generic detail view RestaurantsDetailView must be called with either an object pk or a slug.

in urls:
url(r'^restaurants/(?P<pk>\w+)$', RestaurantsDetailView.as_view()),
in views:
 class RestaurantsDetailView(DetailView):
	queryset = RestaurantLocation.objects.all()
	def get_context_data(self, *args, **kwargs):
		print(self.kwargs)
		context=super(RestaurantsDetailView, self).get_context_data(*args, **kwargs)
		print(context)
		return context

if want to use customized key
in urls.py
url(r'^restaurants/(?P<rest_id>\w+)$', RestaurantsDetailView.as_view()),
in views:
add 
	def get_object(self, *args, **kwargs):
		rest_id = self.kwargs.get('rest_id')
		obj = get_object_or_404(RestaurantLocation, id=rest_id) # pk = rest_id
		return obj
to 
class RestaurantsDetailView(DetailView):

create a restaurantlocation_detail.html
{% extends "base.html" %}
{% block head_title %}Restaurant || {{block.super}}{% endblock head_title %}

{% block content %}
<h1>{{object.name}}  <small>{{object.category}}</small></h1>
<p>{{object.location}}</p>
<p>{{object.timestamp}}, updated {{object.update|timesince}} ago</p>
{% endblock content %}


20] slugFiled & the Unique Slug generator
to design your own urls
http://127.0.0.1:8000/restaurants/<toufu>  <toufu> is called slug

a-unique-slug-generator-for-django:
https://www.codingforentrepreneurs.com/blog/a-unique-slug-generator-for-django/

models.py
add new field to models.py
slug		= models.SlugField(null=True, blank=True)
	@property
	def title(self):
		return self.name
add new utils
unique_slug_generator and random_string_generator
they will auto generate the unique slug based on the object title

21] signal for unique slugs
https://docs.djangoproject.com/en/1.11/topics/signals/

in models.py
from django.db.models.signals import pre_save, post_save

def rl_pre_save_receiver(sender, instance, *args, **kwargs):
	print ('saving..')
	print(instance.timestamp)
	if not instance.slug:
	 	instance.slug = unique_slug_generator(instance)

pre_save.connect(rl_pre_save_receiver, sender=RestaurantLocation)

22] slug as URL params
in restaurants_list.html
add:
<ul>
	{% for obj in object_list %}
		<li><a href='/restaurants/{{obj.slug}}'>{{obj}}</a><br/>
		{{ obj.nameq }} {{ obj.location }} {{ obj.category }} {{ obj.timestamp }} {{ obj.update }}</li>
	{% endfor %}
</ul>
in urls.py
add
url(r'^restaurants/(?P<slug>[\w-]+)$', RestaurantsDetailView.as_view()),

user type url --> urls.py parse and find the related view in views.py (map url to controller's action/method in views.py)
the invoked view will load the corresponding model from models.py and get custimized queryset and send to template(html) as object_list (can get the slug property from DB and assign to the new url dynamicly)
user will get the tempalte shown in browser

23] Get single items from the DB
category__iexact
RestaurantLocation.objects.filter(category__iexact='western')

24] saving data the hard + wrong way
create new template form.html
{% extends "base.html" %}
{% block head_title %}Add Restaurant || {{block.super}}{% endblock head_title %}

{% block content %}
<h1>Add Restaurants</h1>
<form>
	<input type='test' name='title' placeholder='Your Title'>
	<input type='test' name='location' placeholder='Your Location'>
	<input type='test' name='category' placeholder='Your Category'>
	<button type='submit'>Save</button>
</form>
{% endblock content %}

create new form.py
from django import forms

class RestaurantCreateForm(forms.Form):
	name 		= forms.CharField()
	location 	= forms.CharField(required=False)
	category 	= forms.CharField(required=False)

update views.py
from .forms import RestaurantCreateForm

def restaurant_createview(request):
	template_name = 'restaurants/form.html'
	context = {
	}
	return render(request, template_name, context)

update urls.py
import restaurant_createview
add
url(r'^restaurants/create$', restaurant_createview),

update utils.py to avoid 'create' to be saved as slug
DONT_USE = ['create']
if slug in DONT_USE:
        new_slug = "{slug}-{randstr}".format(
                    slug=slug,
                    randstr=random_string_generator(size=4)
                )
        return unique_slug_generator(instance, new_slug=new_slug)

after clicking save, the url updated as shoen below:
?title=Mcdonald&location=1+hougang+ave&category=western (Get params, cuz the default method of form is 'GET' int form.html)

when the form mothod is 'POST' CSRF token is needed for security reason 
{% csrf_token %} is the security token django generate for the page
in forms.html
<form method='POST'> {% csrf_token %}
	<input type='test' name='title' placeholder='Your Title'>
	<input type='test' name='location' placeholder='Your Location'>
	<input type='test' name='category' placeholder='Your Category'>
	<button type='submit'>Save</button>
</form>

use the form for data validation

25] The Power of Django Forms
in views:
def restaurant_createview(request):
	form = RestaurantCreateForm(request.POST or None)
	errors = None
	if(form.is_valid()):
		obj = RestaurantLocation.objects.create(
				name=form.cleaned_data.get('name'),
				location=form.cleaned_data.get('location'),
				category=form.cleaned_data.get('category')
			)
		return HttpResponseRedirect("/restaurants")
	if form.errors:
		#print(form.errors)
		errors = form.errors

	template_name = 'restaurants/form.html'
	context = {
		"form":form, "errors":errors
	}

in forms.py
	def clean_name(self):    #clean_<propertyname>
		name = self.cleaned_data.get("name")
		if name == "Hello":
			raise forms.ValidationError("Not a valid name")
		return name

in forms.html
<form method='POST'> {% csrf_token %}
	{{ form.as_p }}
	{% if errors %}
	{{  errors  }}
	{% endif %}<br> 
	<button type='submit'>Save</button>
</form>

26] the extra power of Django Forms
in forms.py

class RestaurantLocationCreateForm(forms.ModelForm):
	class Meta:
		model = RestaurantLocation
		fields = [
			'name',
			'location',
			'category',
		]

in views.py
class RestaurantCreateView(CreateView):
	form_class = RestaurantLocationCreateForm
	template_name = 'restaurants/form.html'
	success_url = "/restaurants";

in urls.py
url(r'^restaurants/create$', RestaurantCreateView.as_view()),

2018/06/30
27] simple + effective validation
1) in forms.py add validation in form by using clean_<propertyname>
class RestaurantLocationCreateForm(forms.ModelForm):
	email = forms.EmailField()
	class Meta:
		model = RestaurantLocation
		fields = [
			'name',
			'location',
			'category',
		]

	def clean_name(self):    #clean_<propertyname>
		name = self.cleaned_data.get("name")
		if name == "Hello":
			raise forms.ValidationError("Not a valid name")
		return name

	def clean_email(self):
		email = self.cleaned_data.get("email")
		if ".edu" in email:
			raise forms.ValidationError("We do not accept edu emails")
		return email

2) 
add validators.py
from django.core.exceptions import ValidationError

CATEGORIES = ['Mexico', 'western', 'Asian', 'Unknown']

def validate_category(value):
	cat = value.capitalize()
	if not value in CATEGORIES and not cat in CATEGORIES:
		raise ValidationError(f"{value} not a valid category")

invoke validate_category function in forms.py
from .validators import validate_category
class RestaurantLocationCreateForm(forms.ModelForm):
	category = forms.CharField(required=False, validators=[validate_category])
	class Meta:
		model = RestaurantLocation
		fields = [
			'name',
			'location',
			'category',
		]

or invoke validate_category function in models.py
from .validators import validate_category

#models.model --> derive from models
class RestaurantLocation(models.Model): 
	category 	= models.CharField(max_length=120, null=True, blank=True, validators=[validate_category])


28] let users own data
in models.py
from django.conf import settings
Users = settings.AUTH_USER_MODEL
class RestaurantLocation(models.Model): 
	owner 		= models.ForeignKey(Users) #class_instance.model_set.all()  # Django Models Unleashed JOINCFE.com


Command:
from restaurants.models import RestaurantLocation
RestaurantLocation.objects.filter(owner__id='1')
qs = RestaurantLocation.objects.filter(owner__username__iexact='eric')
User = obj.owner.__class__
>>> User
<class 'django.contrib.auth.models.User'>
>>> User.objects.all()
<QuerySet [<User: eric>]>
>>> eric_user = User.objects.all().first()
>>> eric_user.restaurantlocation_set.all()
<QuerySet [<RestaurantLocation: toufu>, <RestaurantLocation: mexico-roll>, <RestaurantLocation: sushi>, <RestaurantLocation: beef-steak>, <RestaurantLocation: beef-steak>, <RestaurantLocation: Mcdonald>, <RestaurantLocation: create>, <RestaurantLocation: create>, <RestaurantLocation: newItem>, <RestaurantLocation: newItem>, <RestaurantLocation: popeyes>, <RestaurantLocation: hello>, <RestaurantLocation: Hello>, <RestaurantLocation: createview>, <RestaurantLocation: create another>, <RestaurantLocation: chicken chop>, <RestaurantLocation: new item>, <RestaurantLocation: new food>, <RestaurantLocation: new0>, <RestaurantLocation: new1>, '...(remaining elements truncated)...']>
>>> new_qs =  eric_user.restaurantlocation_set.all()
>>> new_obj = new_qs.first()
>>> new_obj
<RestaurantLocation: toufu>
>>> RK = new_obj.__class__
>>> RK.objects.all()
<QuerySet [<RestaurantLocation: toufu>, <RestaurantLocation: mexico-roll>, <RestaurantLocation: sushi>, <RestaurantLocation: beef-steak>, <RestaurantLocation: beef-steak>, <RestaurantLocation: Mcdonald>, <RestaurantLocation: create>, <RestaurantLocation: create>, <RestaurantLocation: newItem>, <RestaurantLocation: newItem>, <RestaurantLocation: popeyes>, <RestaurantLocation: hello>, <RestaurantLocation: Hello>, <RestaurantLocation: createview>, <RestaurantLocation: create another>, <RestaurantLocation: chicken chop>, <RestaurantLocation: new item>, <RestaurantLocation: new food>, <RestaurantLocation: new0>, <RestaurantLocation: new1>, '...(remaining elements truncated)...']>

=================================================================================================
29] Associate user to form data in FBV (form based view)
in urls.py
url(r'^restaurants/create_FBV$' , restaurant_FBV_createview),
in views.py
def restaurant_FBV_createview(request):

	form = RestaurantLocationCreateForm(request.POST or None)
	errors = None
	if(form.is_valid()):
		if request.user.is_authenticated():
			instance = form.save(commit=False)
			instance.owner = request.user
			instance.save()
			return HttpResponseRedirect("/restaurants")
		else:
			return HttpResponseRedirect("/login")
	if form.errors:
		errors = form.errors

	template_name = 'restaurants/form.html'
	context = {
		"form":form, "errors":errors
	}
	return render(request, template_name, context)
=================================================================================================
30] Associate user to data in a Class based View
in views.py 
add to 
class RestaurantCreateView(CreateView):
	form_class = RestaurantLocationCreateForm
	template_name = 'restaurants/form.html'
	success_url = "/restaurants";

	#Create view will run the form_valid method by default 
	#in the form_valid it will do form.save() by default
	def form_valid(self, form):
		instance = form.save(commit=False)
		instance.owner = self.request.user
		#instance.save()
		return super(RestaurantCreateView, self).form_valid(form)
=================================================================================================
31] login required to view

local settings:
LOGIN_URL = '/login' set the default login url name

a) form based view:
from django.contrib.auth.decorators import login_required
@login_required(login_url='/login')
def restaurant_FBV_createview(request):

b) class based view:
from django.contrib.auth.mixins import LoginRequiredMixin # use for class based views
class RestaurantCreateView(LoginRequiredMixin, CreateView):
	form_class = RestaurantLocationCreateForm
	template_name = 'restaurants/form.html'
	success_url = "/restaurants";
	#cutimize login page name
	login_url = '/newlogin'
=================================================================================================
32] login view
create login.html under restaurants/template/registration
in urls.py
from django.contrib.auth.views import LoginView
url(r'^login/$', LoginView.as_view(), name='login')
]

=================================================================================================
33] using reverse to shortcut URLs
add urls.py under restaurants
remove the restaurants and change to relative path, add name for each url

from django.conf.urls import include, url

from .views import (
	RestaurantsListView,
	RestaurantsDetailView,
	RestaurantCreateView,

)

urlpatterns = [

    url(r'^$', RestaurantsListView.as_view(), name='list'),
    url(r'^/create$', RestaurantCreateView.as_view(),  name='create'),
    url(r'^/(?P<slug>[\w-]+)$', RestaurantsDetailView.as_view(), name='detail')
]


in urls.py from muypicky
replace all restaurants related urls to 
url(r'^restaurants/', include('restaurants.urls', namespace='restaurants')),

in models.py use reverse to shorcut urls (<namespcae>:<urlname>)
add 
def get_absolute_url(self):
		return reverse('restaurants:detail', kwargs={'slug': self.slug})
under
class RestaurantLocation(models.Model): 

in nav.html
use <namespcae>:<urlname>
<a href='{% url "restaurants:list" %}'>Restaurants</a>

in restaurantlocation_list.html
use get_absolute_url method to return the item detail url after creation
<a href='{{ obj.get_absolute_url }}'/>{{obj}}</a><br/>
this replace the success_url assigning in the RestaurantCreateView

use <namespcae>:<urlname>
<a href='{% url "restaurants:create" %}'>Create</a>

=================================================================================================
34] Menu Items App
create new app:
python manage.py startapp menus

in menus/models, create new model for items

from django.conf import settings
from django.db import models
from restaurants.models import RestaurantLocation

class Items(models.Model):
	# association
	user 		= models.ForeignKey(settings.AUTH_USER_MODEL)
	restaurant	= models.ForeignKey(RestaurantLocation)
	# item stuff
	name 		= models.CharField(max_length=120)
	contents	= models.TextField(help_text='Seperate each by comma')
	excludes	= models.TextField(blank=True, null=True, help_text='Seperate each by comma')
	public 		= models.BooleanField(default=True)
	timestamp	= models.DateTimeField(auto_now_add=True)
	updated 	= models.DateTimeField(auto_now=True)


	class Meta:
		ordering = ['-updated','-timestamp'] # Item.objects.all() 
		#-updated --> return the first updated item, 
		#updated  --> return the last updated item

	def get_contents(self):
		return self.contents.split(",")

	def get_excludes(self):
		return self.contents.split(",")

in menus/admin.py
from django.contrib import admin

from .models import Items

admin.site.register(Items)

in base.py add new apps

INSTALLED_APPS = (
    'menus'
)

=================================================================================================
35] Menu Item Views
Add views for items, similar to restaurant views
=================================================================================================
36] Limiting Form Field to QuerySet
get the kwargs from views in views.py
	def get_form_kwargs(self):
		kwargs = super(ItemsCreateView, self).get_form_kwargs()
		kwargs['user']=self.request.user
		# kwargs['instance']=Items.objects.filter(user=self.request.user).first()
		return kwargs 

use the kwargs as filter etc. in forms.py
def __init__(self, user=None, *args, **kwargs):
		print(user)
		# print(kwargs.pop('instance'))
		print(kwargs)
		super(ItemsForm, self).__init__(*args, **kwargs)
		self.fields['restaurant'].queryset = RestaurantLocation.objects.filter(owner=user)
=================================================================================================
37] Personalized Items
in restaurants view
do a filter that only show the items related to the login user
class RestaurantsListView(LoginRequiredMixin, ListView):
	def get_queryset(self):
		return RestaurantLocation.objects.filter(owner=self.request.user)
=================================================================================================
38]User Profile View
create new app profile
=================================================================================================
39]style profile with Bootstrap
=================================================================================================
40] Adding a Robust Search (6:11:56)
Note: all the query logic should be defined in the model instead of view
in models.py under restaurants
from django.db.models import Q
Users = settings.AUTH_USER_MODEL

# this to define a custimized queryset
class RestaurantLocationQuerySet(models.query.QuerySet):
	def search(self,query):
		#if RestaurantLocation.objects.all().search(query) is called with query passed in
		#if RestaurantLocation.objects.filter(something).search() is called 
		#cuz RestaurantLocation.objects.all() or RestaurantLocation.objects.filter()will return 
		get_queryset that will call RestaurantLocationQuerySet
		if query:
			query=query.strip()
			return self.filter(
				Q(name__icontains=query)|
				Q(location__icontains=query)|
				Q(category__icontains=query)|
				Q(items__name__icontains=query)|
				).distinct()
				Q(items__contents__icontains=query)
		else:
			return self

#this is the normal query manager
class RestaurantLocationManager(models.Manager):
	def get_queryset(self):
		return RestaurantLocationQuerySet(self.model,using=self._db)

# if RestaurantLocation.objects.search() is called
	def search(self,query): 
		return self.get_queryset().search(query)

under 
class RestaurantLocation(models.Model): 
add
	objects = RestaurantLocationManager() #add Model.objects.all()
so that each time when called model.objects, it will call RestaurantLocationManager directly
--------------------------------
in view.py under profiles
add to 
class ProfileDetailsView(DetailView):
	
	def get_context_data(self, *args, **kwargs):
		context = super(ProfileDetailsView,self).get_context_data(*args,**kwargs)
		user = context['user']
		query = self.request.GET.get('q') #q is defined in the template
		
		item_exists = Items.objects.filter(user=user).exists()
		qs = RestaurantLocation.objects.filter(owner=user).search(query)
		# if query: #this part has been moved to models.py under restaurants
		# 	qs = qs.search(query)
			#qs = RestaurantLocation.objects.search(query)
		if item_exists and qs.exists():
			context['locations'] = qs
		return context
--------------------
in users.html under profiles
add search form 
<form class='form' method='GET' action=''>
<input type='text' placeholder="Search..." name='q' value='{{ request.GET.q }}'> # q is defined here
<button class='btn btn-default' type='submit'>Search</button>
</form>

{% if locations %} #if there are return values in context
{% for rest in locations %} 
	<div class='row'>
		<div class='col-sm-12'>
			<dic class='thumbnail'>
			<h4><b>{{ rest.title }}</b> </h4> 
			<p><a href='{{ request.path }}?q={{rest.location}}'>{{rest.location}}</a> #add hyperlink to the location name
				| <a href='{{ request.path }}?q={{rest.category}}'>{{rest.category}}</a></p> #add hyperlink to the cate name
			<ul> 
				{% for item in rest.items_set.all %}
					<li style='margin-bottom: 15px;'><b>{{ item.name }}</b><br/>
						{% for ing in item.get_contents %}
							<a href='{{ request.path }}?q={{ing}}'>{{ing}}</a>
							#add hyperlink to the each item name
						{% endfor %}
					</li>
				{% endfor %}
			</ul>
			
		</div>
	</div>
{% endfor %}

=================================================================================================
41]follow users
add new models Profile to profile.py
create database for user-profile follower and following relationship

register Profile model in admin.py under profile
=================================================================================================
42] Follow Button Form
in muypicky/urls.py
add new url url(r'^profile-follow/$', ProfileFollowToggle.as_view(), name='follow')

in profiles/models.py
create ProfileManager to manage the following flag
request_user is the user that request this action
username_to_toggle is request.POST.get("username") which is the user in the profile to follow
class ProfileManager(models.Manager):
	def toggle_follow(self, request_user, username_to_toggle):
#based on the username_to_toggle get the profile object
		_profile = Profile.objects.get(user__username__iexact=username_to_toggle)
		user = request_user
		is_following = False
# requested user is in the profile user's follower list
		if user in _profile.followers.all():
			_profile.followers.remove(user)
		else:
			_profile.followers.add(user)
			is_following=True
		return _profile, is_following

class Profile(models.Model):
...
	objects = ProfileManager()

in profile/views.py
#create a template tag filter after creating the in point
class ProfileFollowToggle(LoginRequiredMixin, View):
	def post(self, request, *args, **kwargs):
		username_to_toggle = request.POST.get("username")
		_profile, is_following = Profile.objects.toggle_follow(request.user, username_to_toggle)
#return the profile page
		return redirect(f"/profile/{_profile.user.username}")

in profiles/user.html add following to include the profiles/snippet/follow_form.html
<p>{% include 'profiles/snippet/follow_form.html' with username=user.username is_following=is_following %}</p> 

create profiles/snippet/follow_form.html
add follow/unfollow button
{% if request.user.is_authenticated %}
<form class='form' method="POST" action='{% url "follow" %}'> {% csrf_token %}
<input type='hidden' name='username' value='{% if username %}{{username}}{% else %}{{ request.user }}{%endif%}'/>
{% if username != request.user.username %}
<button class='btn {% if is_following %}btn-default{% else %}btn-primary{% endif %}'>{% if is_following %}UnFollow{% else %}Follow{% endif %}</button>
{% endif %}
</form>
{% endif %}
=================================================================================================
43] Following Home Page 
in menus/views.py
add home view to show the menu items of other user's whose profile is followed by current user 
class HomeView(LoginRequiredMixin, View):
	def get(self, request, *args, **kwargs):
		if not request.user.is_authenticated():
			return render(request, "home.thml", {})  #return the original home page
		else:
			user = self.request.user #get current user
			is_following_user_id = [x.user.id for x in user.is_following.all()] #get list of user id that current user following
			qs = Items.objects.filter(user__id__in = is_following_user_id, public=True).order_by("-updated")[:10] #first 3 latest # get menu items based on the user id

			return render(request, "menus/home-feed.html", {'object_list':qs})
add home-feed.html template
{% if object_list %}
	{% for obj in object_list %}

		<div class='thumbnail'>
			<h3><a href='{% url "profile:detail" username=obj.user %}'>{{obj.user }}</a></h3> 	
			<h4><b>{{obj.name }}</b></h4> 	
			<p><a href='{% url "profile:detail" username=obj.user %}?q={{obj.restaurant.name}}'>{{obj.restaurant.name}}</a> | <a href='{% url "profile:detail" username=obj.user %}?q={{obj.restaurant.location}}'>{{obj.restaurant.location}}</a> | <a href='{% url "profile:detail" username=obj.user %}?q={{obj.restaurant.category}}'>{{obj.restaurant.category}}</a></p>
			<p>
				<b>{{obj.name }}:</b>
					{% if obj.contents %} With 
						{% for item in obj.get_contents %}
						<a href='{% url "profile:detail" username=obj.user %}?q={{item}}'>{{item}}</a>
						{% endfor %}
					{% endif %}
			</p>
		</div>

	{% endfor %}
{% else %}
<p class='lead'> No Items Found</p>
{% endif %}
=================================================================================================
44 - Register View (7:38:12)
Add register form
Add register view
Add register template
=================================================================================================
45 - Activation Keys (7:46:52)
https://github.com/codingforentrepreneurs/django-user-model-unleashed/blob/master/src/accounts/forms.py
https://www.codingforentrepreneurs.com/blog/?q=send_mail
https://www.codingforentrepreneurs.com/blog/configure-email-in-django/
=================================================================================================
46 - Watch & Go Live (8:02:29)
=================================================================================================
47 - Thank you (8:04:04)﻿
